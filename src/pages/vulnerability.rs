use std::rc::Rc;

use patternfly_yew::prelude::*;
use yew::prelude::*;
use yew::prelude::*;
use yew_more_hooks::hooks::r#async::*;
use yew_nested_router::components::Link;
use yew_nested_router::prelude::use_router;
use yew_nested_router::prelude::*;

use crate::backend::{Backend, VulnerabilityService};
use crate::pages::AppRoute;

#[derive(Clone, Debug, PartialEq, Eq, Properties)]
pub struct VulnerabilityProps {
    #[prop_or_default]
    pub cve: String,
}

#[function_component(Vulnerability)]
pub fn vulnerability(props: &VulnerabilityProps) -> Html {
    let backdrop = use_backdrop();
    let primary = Callback::from(move |_| {
        if let Some(backdrop) = &backdrop {
            backdrop.open(html!(<LookupVulnerabilityModal/>));
        }
    })
    .into_action("Lookup");

    html!(
        <>
            <PageSection variant={PageSectionVariant::Light} sticky={[PageSectionSticky::Top]} >
                <Content>
                    <Title size={Size::XXXXLarge}>{"Vulnerability"}</Title>
                    <p>{ "Get detailed vulnerability information" }</p>
                </Content>
            </PageSection>

            // We need to set the main section to fill, as we have a footer section
            <PageSection variant={PageSectionVariant::Default} fill={PageSectionFill::Fill}>
                if ! props.cve.is_empty() {
                    <VulnerabilityInformation cve={props.cve.clone()} />
                } else {
                    <Bullseye>
                        <EmptyState
                            full_height=true
                            title="Vulnerability Information"
                            icon={Icon::Package}
                            {primary}
                        >
                            { "Lookup a vulnerability to find more information" }
                        </EmptyState>
                    </Bullseye>
                }
            </PageSection>
        </>
    )
}

#[derive(Clone, Debug, PartialEq, Properties)]
pub struct VulnerabilityInformationProperties {
    cve: String,
}

#[function_component(VulnerabilityInformation)]
fn vulnerability_information(props: &VulnerabilityInformationProperties) -> Html {
    let backend = use_context::<Rc<Backend>>()
        .expect("Can only be called being wrapped by the 'Backend' component");

    let fetch = use_async_with_cloned_deps(
        |cve| async move {
            VulnerabilityService::new((*backend).clone())
                .lookup(&cve)
                .await
        },
        props.cve.clone(),
    );

    html!(
        <Grid gutter=true>
            <GridItem>
                <Gallery style="--pf-l-gallery--GridTemplateColumns--min: 500px;" gutter=true>
                    <Card
                        title={html!(<Title size={Size::XLarge}>{props.cve.clone()}</Title>)}
                    >
                       {
                            match &*fetch {
                                UseAsyncState::Pending | UseAsyncState::Processing => html!(<Spinner/>),
                                UseAsyncState::Ready(Ok(data)) => html!(<VulnerabilityDetails vulnerability={data.clone()}/>),
                                UseAsyncState::Ready(Err(err)) => html!(<>{"Failed to load: "} { err } </>),
                            }
                        }
                    </Card>
                </Gallery>
            </GridItem>
        </Grid>
    )
}

#[derive(Clone, Debug, PartialEq, Eq, Properties)]
pub struct VulnerabilityDetailsProperties {
    pub vulnerability: crate::backend::data::Vulnerability,
}

#[function_component(VulnerabilityDetails)]
fn vulnerability_details(props: &VulnerabilityDetailsProperties) -> Html {
    html!(
            <DescriptionList>
                <DescriptionGroup term="Summary">{props.vulnerability.summary.clone()}</DescriptionGroup>
                <DescriptionGroup term="Advisory"><a href={props.vulnerability.advisory.clone()}>{"Advisory"}</a></DescriptionGroup>
                <DescriptionGroup term="Affects">
                    <List>
                    {
                        for props.vulnerability.packages.iter().map(|pkg| {
                            html_nested!(
                                <li>
                                   /* <a href={pkg.href.clone()}>{pkg.purl.clone()}</a> */
                                    <Link<AppRoute> target={AppRoute::Package{package: pkg.purl.clone()}}>{pkg.purl.clone()}</Link<AppRoute>>
                                </li>
                            )
                        })
                    }
                    </List>
                </DescriptionGroup>
            </DescriptionList>
    )
}

#[function_component(LookupVulnerabilityModal)]
fn lookup_vulnerability_modal() -> Html {
    use patternfly_yew::next::TextInput;

    let form_state = use_state_eq(InputState::default);

    let onvalidated_form = {
        let form_state = form_state.clone();
        Callback::from(move |state| form_state.set(state))
    };

    let validator_cve = |ctx: ValidationContext<String>| {
        if ctx.value.is_empty() {
            return ValidationResult::error("Must not be empty");
        }

        ValidationResult::ok()
    };

    let cve = use_state_eq(|| "CVE-2023-0286".to_string());

    let router = use_router::<AppRoute>();
    let backdrop = use_backdrop();
    let onclick = {
        let cve = cve.clone();
        let backdrop = backdrop.clone();
        Callback::from(move |_| {
            if let Some(backdrop) = &backdrop {
                backdrop.close();
            }
            if let Some(router) = &router {
                router.push(AppRoute::Vulnerability {
                    cve: (*cve).clone(),
                })
            }
        })
    };

    let footer = {
        html!(
            <Button
                variant={ButtonVariant::Primary}
                disabled={(*form_state) == InputState::Error}
                r#type={ButtonType::Submit}
                {onclick}
                form="lookup-form"
            >
                {"Lookup"}
            </Button>
        )
    };

    html!(
        <Bullseye plain=true>
            <Modal
                title="Lookup Vulnerability"
                variant={ModalVariant::Small}
                {footer}
            >
                <Form id="lookup-form" method="dialog"
                    onvalidated={onvalidated_form}
                >
                    <FormGroupValidated<TextInput>
                        label="Vulnerability ID (CVE)"
                        required=true
                        validator={Validator::from(validator_cve)}
                    >
                        <TextInput value={(*cve).clone()} oninput={Callback::from(move |data| cve.set(data))}/>
                    </FormGroupValidated<TextInput>>
                </Form>
            </Modal>
        </Bullseye>
    )
}
